% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/exec-all.R
\name{re_exec_all}
\alias{re_exec_all}
\title{All regular expression matches and positions}
\usage{
re_exec_all(text, pattern, ...)
}
\arguments{
\item{text}{Character vector.}

\item{pattern}{A PCRE regular expression. See \code{\link[base]{regex}}
for more about regular expressions.}

\item{...}{Additional arguments to pass to
\code{\link[base]{gregexpr}} (or \code{\link[base]{regexpr}} if
\code{text} is of length zero).}
}
\value{
A data frame with list columns, see details below.
}
\description{
Match a regular expression to a string, and return all matches and
match positions, plus capture groups as well, if any.
}
\details{
This function is the counterpart of \code{\link{re_exec}}, but it
extracts multiple matching substrings.

The function uses \code{\link[base]{gregexpr}} to extract all matching
substrings for a regular expression, but it returns the results in a
tidy data frame. The strings of the character vector correspond
to the rows of the data frame. The columns correspond to capture groups
and the first matching (sub)string. The columns of named capture groups
are named accordingly, and the column of the full match if the last
column and it is named \code{.match}.

Each column of the result is a list, containing lists of match records.
A match record is a named list, with entries \code{match}, \code{start}
and \code{end}; the matching (sub) string, the start and end positions
(using one based indexing).

If a string has no match, then an empty list is included in the list
column for it.
}
\examples{
name_rex <- paste0(
  "(?<first>[[:upper:]][[:lower:]]+) ",
  "(?<last>[[:upper:]][[:lower:]]+)"
)
notables <- c(
  "  Ben Franklin and Jefferson Davis",
  "\\tMillard Fillmore"
)
re_exec(notables, name_rex)
}
\seealso{
Other tidy.regular.expression.matching: \code{\link{re_exec}},
  \code{\link{re_match_all}}, \code{\link{re_match}}
}

