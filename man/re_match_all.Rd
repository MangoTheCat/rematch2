% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/all.R
\name{re_match_all}
\alias{re_match_all}
\title{Extract all matches of a PCRE regular expression, as a data frame}
\usage{
re_match_all(text, pattern, perl = TRUE, ...)
}
\arguments{
\item{text}{Character vector.}

\item{pattern}{A PCRE regular expression. See \code{\link[base]{regex}}
for more about regular expressions.}

\item{perl}{logical should perl compatible regular expressions be used?
Defaults to TRUE, setting to FALSE will disable capture groups.}

\item{...}{Additional arguments to pass to
\code{\link[base]{gregexpr}} (or \code{\link[base]{regexpr}} if
\code{text} is of length zero).}
}
\value{
A data frame with all matching (sub)strings and capture groups
  for all matches in all input strings. The rows of the data frame
  correspond to the input strings in \code{text}. The columns correspond
  to the capture groups, with two additional columns: \code{.text} is
  the input text, and the last column, \code{.match}
  corresponds to the complete matches. Since all matches are returned
  all columns are list columns containing character vectors.
  The columns of named groups are named as well.
}
\description{
This function is a thin wrapper on the \code{\link[base]{gregexpr}}
base R function, to extract the matching (sub)strings as a data frame.
It extracts all matches, and potentially their capture groups as well.
}
\details{
Note: if the input text character vector has length zero,
\code{\link[base]{regexpr}} is called instead of
\code{\link[base]{gregexpr}}, because the latter cannot extract the
number and names of the capture groups in this case.
}
\examples{
name_rex <- paste0(
  "(?<first>[[:upper:]][[:lower:]]+) ",
  "(?<last>[[:upper:]][[:lower:]]+)"
)
notables <- c(
  "  Ben Franklin and Jefferson Davis",
  "\\tMillard Fillmore"
)
re_match_all(notables, name_rex)
}
\seealso{
Other tidy regular expression matching: \code{\link{re_exec_all}},
  \code{\link{re_exec}}, \code{\link{re_match}}
}
