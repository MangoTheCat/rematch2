% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/exec.R, R/indexing.R
\name{re_exec}
\alias{re_exec}
\alias{$.rematch_records}
\title{First regular expression match and positions}
\usage{
re_exec(text, pattern, perl = TRUE, ...)

\method{$}{rematch_records}(x, name)
}
\arguments{
\item{text}{Character vector.}

\item{pattern}{A PCRE regular expression. See \code{\link[base]{regex}}
for more about regular expressions.}

\item{perl}{logical should perl compatible regular expressions be used?}

\item{...}{Additional arguments to pass to
\code{\link[base]{regexpr}}.}

\item{x}{Object returned by \code{re_exec}.}

\item{name}{\code{match}, \code{start} or \code{end}.}
}
\value{
A data frame with list columns. See the details below.
}
\description{
Match a regular expression to a string, and return the first match,
match positions, and also capture groups, if any.
}
\details{
The results are returned in a data frame with list columns. The strings
of the character vector correspond to the rows of the data frame.
The columns correspond to capture groups and the first matching
(sub)string. The columns of named capture groups are named accordingly,
the column called \code{.text} contains the input text, and the
column of the full match is last, and it is named \code{.match}.

Each column of the result is a list, containing match records.
A match record is a named list, with entries \code{match}, \code{start}
and \code{end}; the matching (sub) string, the start and end positions
(using one based indexing).

Non-matching strings contain NAs in their corresponding rows, for the
matches and the positions as well.

To make it easier to extract matching substrings or positions, a
special \code{$} operator is defined on match columns. (Both the
\code{.match} column and the columns corresponsing to the match groups.)
See example below.
}
\examples{
name_rex <- paste0(
  "(?<first>[[:upper:]][[:lower:]]+) ",
  "(?<last>[[:upper:]][[:lower:]]+)"
)
notables <- c(
  "  Ben Franklin and Jefferson Davis",
  "\\tMillard Fillmore"
)
pos <- re_exec(notables, name_rex)
pos

# Custom $ to extract matches and positions
# for groups or the whole match
pos$first$match
pos$first$start
pos$first$end
}
\seealso{
Other tidy regular expression matching: \code{\link{re_exec_all}},
  \code{\link{re_match_all}}, \code{\link{re_match}}
}
